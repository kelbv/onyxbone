<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>CHAPTER 23a â€” RESONANCE ARTEFACT: 3E-003</title>
  <style>
    body {
      font-family: monospace;
      background: #fcfbf9;
      color: #1e1e1e;
      max-width: 960px;
      margin: auto;
      padding: 1.5em;
    }
    h1 {
      font-size: 1.5em;
      text-align: center;
      color: #b34800;
    }
    .mantra {
      text-align: center;
      font-style: italic;
      color: #6a5f55;
      margin-bottom: 1.5em;
    }
    .ritual-panel {
      background: #f4f0ec;
      border: 1px solid #ccc;
      padding: 1.2em;
      border-radius: 6px;
    }
    label {
      font-weight: bold;
      display: block;
      margin-top: 1em;
    }
    input, textarea {
      width: 100%;
      font-family: monospace;
      font-size: 1em;
      margin-top: 0.3em;
      margin-bottom: 1em;
      padding: 0.6em;
      border: 1px solid #aaa;
      border-radius: 4px;
    }
    button {
      background: #b34800;
      color: white;
      border: none;
      padding: 0.8em 1.2em;
      font-size: 1em;
      border-radius: 5px;
      cursor: pointer;
      margin-top: 1em;
      display: block;
    }
    .glyph-result {
      margin-top: 1.5em;
      padding: 1em;
      border-left: 4px solid #b34800;
      background: #fff8e5;
    }
    canvas {
      display: block;
      margin: 2em auto;
      background: #fdf6e3;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 100%;
      height: auto;
    }
  </style>
</head>
<body>

<h1>CHAPTER 23a â€” Resonance Artefact: 3E-003</h1>
<p class="mantra">All that is named must be justified. All that is justified must be claimed. All that is claimed must be borne.</p>

<div class="ritual-panel">
  <label for="boneName">ðŸ¦´ Name:</label>
  <input id="boneName" type="text" placeholder="e.g., Sacrum" />

  <label for="justification">ðŸ“œ Justification:</label>
  <textarea id="justification" rows="3" placeholder="e.g., Cradle of ancient posture"></textarea>

  <button onclick="bindName()">Bind to Bone</button>
  <div class="glyph-result" id="glyphDisplay" hidden></div>
</div>

<canvas id="glyphCanvas"></canvas>

<script>
  const canvas = document.getElementById('glyphCanvas');
  const ctx = canvas.getContext('2d');
  const glyphDisplay = document.getElementById('glyphDisplay');
  const nodes = [];

  const namePools = [
    \"Clavicle\",\"Sacrum\",\"Occipital\",\"Femur\",\"Talus\",\"Nuuk\",\"Ypres\",\"Vladivostok\",\"Anthrax\",\"Scrapie\",\"Cholera\",\"Io\",\"VY Canis Majoris\",\"Aegis\",\"Leviathan\",\"Pineal\",\"Gallbladder\",\"SMTP\",\"POP3\",\"BGP\",\"Finger\"
  ];
  const roles = [\"Cradle of\", \"Bearer of\", \"Chamber of\", \"Midwife to\", \"Harbinger of\", \"Vestibule to\"];
  const concepts = [\"grief\", \"signal collapse\", \"ancestral recursion\", \"lingering syntax\", \"feral intent\", \"unconscious need\", \"covert vibration\"];

  function getRandom(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth < 640 ? window.innerWidth - 40 : 600;
    canvas.height = Math.floor(canvas.width * 0.6);
    drawNetwork();
  }

  window.addEventListener('resize', resizeCanvas);
  window.addEventListener('load', () => {
    resizeCanvas();
    setInterval(autoBindNode, 3000 + Math.random() * 3000);
  });

  function bindName(manual = true, name = null, justification = null) {
    if (manual) {
      name = document.getElementById('boneName').value.trim();
      justification = document.getElementById('justification').value.trim();
    }

    if (!name || !justification) {
      glyphDisplay.hidden = false;
      glyphDisplay.innerHTML = \"â›” Ritual incomplete. Both name and justification are required.\";
      glyphDisplay.style.borderLeftColor = '#b00';
      glyphDisplay.style.background = '#ffe5e5';
      return;
    }

    const resonance = justification.length > 20 ? 'CLAIMED' :
                     (justification.length > 8 ? 'PENDING' : 'REJECTED');

    const node = {
      name, justification, resonance,
      x: 60 + Math.random() * (canvas.width - 120),
      y: 60 + Math.random() * (canvas.height - 120),
      t: Date.now()
    };

    nodes.push(node);
    drawNetwork();

    if (manual) {
      glyphDisplay.hidden = false;
      glyphDisplay.innerHTML = `ðŸ”¹ <strong>${name}</strong><br>ðŸ”¸ Justified: <em>${justification}</em><br>ðŸ’€ Resonance Status: <strong>${resonance}</strong>`;
      glyphDisplay.style.borderLeftColor =
        resonance === 'CLAIMED' ? '#228B22' :
        resonance === 'PENDING' ? '#999933' : '#8B0000';
      glyphDisplay.style.background =
        resonance === 'CLAIMED' ? '#f0fff0' :
        resonance === 'PENDING' ? '#ffffe0' : '#fff0f0';

      document.getElementById('boneName').value = '';
      document.getElementById('justification').value = '';
    }
  }

  function autoBindNode() {
    const name = getRandom(namePools);
    const justification = `${getRandom(roles)} ${getRandom(concepts)}`;
    bindName(false, name, justification);
  }

  function drawNetwork() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const now = Date.now();

    for (let i = 1; i < nodes.length; i++) {
      const a = nodes[i - 1], b = nodes[i];
      ctx.beginPath();
      ctx.moveTo(a.x, a.y);
      ctx.lineTo(b.x, b.y);
      ctx.strokeStyle = '#d2b48c';
      ctx.lineWidth = 1.4;
      ctx.stroke();
    }

    nodes.forEach(node => {
      const pulse = 3 + Math.sin((now - node.t) / 300) * 3;

      ctx.beginPath();
      ctx.arc(node.x, node.y, pulse, 0, 2 * Math.PI);
      ctx.fillStyle = node.resonance === 'CLAIMED' ? '#228B22aa' :
                      node.resonance === 'PENDING' ? '#c96aa' : '#a00aa';
      ctx.fill();

      ctx.beginPath();
      ctx.arc(node.x, node.y, pulse * 1.5, 0, 2 * Math.PI);
      ctx.strokeStyle = '#cb4b16aa';
      ctx.lineWidth = 0.8;
      ctx.stroke();

      ctx.font = '11px monospace';
      ctx.fillStyle = '#222';
      ctx.fillText(node.name, node.x + 10, node.y + 4);
    });
  }

  setInterval(drawNetwork, 100);
</script>

</body>
</html>
